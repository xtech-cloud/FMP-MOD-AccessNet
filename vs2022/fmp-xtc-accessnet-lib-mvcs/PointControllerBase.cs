
//*************************************************************************************
//   !!! Generated by the fmp-cli 1.70.0.  DO NOT EDIT!
//*************************************************************************************

using System.Threading;
using XTC.FMP.LIB.MVCS;
using XTC.FMP.MOD.AccessNet.LIB.Proto;

namespace XTC.FMP.MOD.AccessNet.LIB.MVCS
{
    /// <summary>
    /// Point控制层基类
    /// </summary>
    public class PointControllerBase : Controller
    {
        /// <summary>
        /// 带uid参数的构造函数
        /// </summary>
        /// <param name="_uid">实例化后的唯一识别码</param>
        /// <param name="_gid">直系的组的ID</param>
        public PointControllerBase(string _uid, string _gid) : base(_uid)
        {
            gid_ = _gid;
        }


        /// <summary>
        /// 更新Online的数据
        /// </summary>
        /// <param name="_status">直系状态</param>
        /// <param name="_response">Online的回复</param>
        public virtual void UpdateProtoOnline(PointModel.PointStatus? _status, UuidResponse _response, object? _context)
        {
            Error err = new Error(_response.Status.Code, _response.Status.Message);
            UuidResponseDTO? dto = new UuidResponseDTO(_response);
            getView()?.RefreshProtoOnline(err, dto, _context);
        }

        /// <summary>
        /// 更新Offline的数据
        /// </summary>
        /// <param name="_status">直系状态</param>
        /// <param name="_response">Offline的回复</param>
        public virtual void UpdateProtoOffline(PointModel.PointStatus? _status, UuidResponse _response, object? _context)
        {
            Error err = new Error(_response.Status.Code, _response.Status.Message);
            UuidResponseDTO? dto = new UuidResponseDTO(_response);
            getView()?.RefreshProtoOffline(err, dto, _context);
        }

        /// <summary>
        /// 更新HeartBeat的数据
        /// </summary>
        /// <param name="_status">直系状态</param>
        /// <param name="_response">HeartBeat的回复</param>
        public virtual void UpdateProtoHeartBeat(PointModel.PointStatus? _status, UuidResponse _response, object? _context)
        {
            Error err = new Error(_response.Status.Code, _response.Status.Message);
            UuidResponseDTO? dto = new UuidResponseDTO(_response);
            getView()?.RefreshProtoHeartBeat(err, dto, _context);
        }

        /// <summary>
        /// 更新Retrieve的数据
        /// </summary>
        /// <param name="_status">直系状态</param>
        /// <param name="_response">Retrieve的回复</param>
        public virtual void UpdateProtoRetrieve(PointModel.PointStatus? _status, PointRetrieveResponse _response, object? _context)
        {
            Error err = new Error(_response.Status.Code, _response.Status.Message);
            PointRetrieveResponseDTO? dto = new PointRetrieveResponseDTO(_response);
            getView()?.RefreshProtoRetrieve(err, dto, _context);
        }

        /// <summary>
        /// 更新List的数据
        /// </summary>
        /// <param name="_status">直系状态</param>
        /// <param name="_response">List的回复</param>
        public virtual void UpdateProtoList(PointModel.PointStatus? _status, PointListResponse _response, object? _context)
        {
            Error err = new Error(_response.Status.Code, _response.Status.Message);
            PointListResponseDTO? dto = new PointListResponseDTO(_response);
            getView()?.RefreshProtoList(err, dto, _context);
        }


        /// <summary>
        /// 获取直系视图层
        /// </summary>
        /// <returns>视图层</returns>
        protected PointView? getView()
        {
            if(null == view_)
                view_ = findView(PointView.NAME + "." + gid_) as PointView;
            return view_;
        }

        /// <summary>
        /// 直系的MVCS的四个组件的组的ID
        /// </summary>
        protected string gid_ = "";

        /// <summary>
        /// 直系视图层
        /// </summary>
        private PointView? view_;
    }
}
